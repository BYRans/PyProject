import malware_classification.global_var as GLVAR
import numpy as np
import json
from sklearn.model_selection import train_test_split
import math
import re


def create_oprations_set(raw_filename, op_index_filename):
    print("running create_oprations_set ...")
    with open(raw_filename) as raw_data:
        operations = set()
        for line in raw_data:
            operation = line.replace('\n', '').split(' ')
            operations = operations.union(set(operation))

    operations_list = list(operations)
    map_index = range(len(operations))
    ziped_op_index = zip(operations_list, map_index)

    operations_dic = {k: v + 1 for k, v in ziped_op_index}  # V+1 for no operation index is 0

    with open(op_index_filename, 'w') as json_file:
        json.dump(operations_dic, json_file, ensure_ascii=False)
    print("operations index dictionary create success! Dic file saved in ", op_index_filename)
    print("the operations's count is:", len(operations))


def raw_labels_to_index(raw_lable_filename):
    raw_lables_list = []

    with open(raw_lable_filename) as raw_data:
        for line in raw_data:
            raw_lables_list.append(line.replace('\n', '').strip())

    lables_set_index = {}
    for lable in raw_lables_list:
        if lable not in lables_set_index:
            lables_set_index[lable] = len(lables_set_index)
            print(lable, "--", lables_set_index[lable])
    print("the lables's count is:", len(lables_set_index))
    lables_index_np = np.zeros(len(raw_lables_list))
    for i, lable in enumerate(raw_lables_list):
        lables_index_np[i] = lables_set_index.get(lable)
    return lables_index_np


def process_raw_data(raw_api_filename, raw_lable_filename, op_index_filename,
                                 attention_train_data):
    np.set_printoptions(threshold=np.inf)

    with open(op_index_filename, 'r') as fileR:
        operation_dic = json.load(fileR)
        fileR.close()

    with open(raw_api_filename) as raw_data:
        line_num = len(raw_data.readlines())

    with open(raw_api_filename) as raw_data:
        length = pow(math.ceil(math.sqrt(len(operation_dic))), 2)
        print("the total operations's ocunt is:",len(operation_dic),"the picture size is",math.ceil(math.sqrt(len(operation_dic))),"*",math.ceil(math.sqrt(len(operation_dic))))
        processed_data_np = np.zeros(shape=(line_num, length)).astype("int32")
        count = 0
        max_repet_count=0
        for i, line in enumerate(raw_data):
            count += 1
            if count % 1000 == 0:
                print(count)
            tmp_processed_data = [0 for x in range(0, length)]
            operations = line.replace('\n', '').split(' ')
            for op in operations:
                if len(op) != 0:
                    index = operation_dic[op]
                    tmp_processed_data[index] = tmp_processed_data[index] + 1
            tmp_max = max(tmp_processed_data)
            if tmp_max > max_repet_count:
                max_repet_count = tmp_max
            processed_data_np[i] = np.array(tmp_processed_data)
        print("max repet operation count is:",max_repet_count)
        labels_index_np = raw_labels_to_index(raw_lable_filename)

        x_train, x_test, y_train, y_test = train_test_split(processed_data_np, labels_index_np, test_size=0.2,
                                                            random_state=0)

        np.savez(attention_train_data, x_train=x_train, x_test=x_test,
                 y_train=y_train, y_test=y_test)


def load_npz_data(file_path):
    f = np.load(file_path)
    x_train, y_train = f['x_train'], f['y_train']
    x_test, y_test = f['x_test'], f['y_test']
    f.close()
    return (x_train, y_train), (x_test, y_test)



def main():

    # create_oprations_set(GLVAR.RAW_API_FILENAME, GLVAR.OP_INDEX_FILENAME)
    process_raw_data(GLVAR.RAW_API_FILENAME, GLVAR.RAW_LABLE_FILENAME, GLVAR.OP_INDEX_FILENAME,
                                 GLVAR.TRAIN_AND_TEST_DATA)



if __name__ == "__main__":
    main()
